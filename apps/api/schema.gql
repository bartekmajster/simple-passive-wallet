# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ConfirmSignup {
  """Confirmatiopn signup successful."""
  success: Boolean!
}

type Email {
  """Email existence."""
  exist: Boolean!
}

type Logout {
  """Logout successful."""
  success: Boolean!
}

type Refresh {
  """Refresh successful."""
  success: Boolean!
}

type ResetPassword {
  """Send reset password successful."""
  success: Boolean!
}

type SendCode {
  """Send code successful."""
  success: Boolean!
}

type SetNewPassword {
  """Name of the user."""
  success: Boolean!
}

type SigninLocal {
  """Signin local successful."""
  success: Boolean!
}

type SignupLocal {
  """Signup local successful."""
  success: Boolean!
}

type CashAccountDelete {
  """Confirmatiopn delete cash account."""
  success: Boolean!
}

type CashAccountOperation {
  """Transaction uuid."""
  uuid: ID!

  """Date of the transaction."""
  date: String!

  """Cash account balance."""
  amount: Float!

  """Cash account oparation type."""
  type: CashAccountOperationType!

  """Portfolio uuid."""
  portfolioUuid: String!
}

enum CashAccountOperationType {
  deposit
  withdrawal
  transfer
  interest
  tax
  fee
  other
}

type CashAccount {
  """Cash account uuid."""
  uuid: ID!

  """Cash account name."""
  name: String!

  """Cash account currency."""
  currency: Currency!

  """Account balance."""
  balance: Float!

  """Account opeartions."""
  operations(first: Float, skip: Float): [CashAccountOperation!]!
}

enum Currency {
  USD
  EUR
  JPY
  GBP
  CNY
  AUD
  CAD
  CHF
  HKD
  SGD
  SEK
  KRW
  NOK
  NZD
  INR
  MXN
  TWD
  ZAR
  BRL
  DKK
  PLN
  THB
  ILS
  IDR
  CZK
  AED
  TRY
  HUF
  CLP
  SAR
  PHP
  MYR
  COP
  RUB
  RON
  PEN
  BHD
  BGN
  ARS
}

type IntroductionCashAccounts {
  """Cash accounts created successfully."""
  success: Boolean!
}

type InstrumentHistory {
  """Date"""
  date: String!

  """Open"""
  open: Float!

  """High"""
  high: Float!

  """Low"""
  low: Float!

  """Close"""
  close: Float!

  """Adjusted close"""
  adjusted_close: Float!

  """Volume"""
  volume: Float!
}

type SearchInstrument {
  """Code"""
  Code: String!

  """Exchange"""
  Exchange: String!

  """Name"""
  Name: String!

  """Type"""
  Type: String!

  """Country"""
  Country: String!

  """Currency"""
  Currency: String!

  """ISIN"""
  ISIN: String

  """previousClose"""
  previousClose: Float!

  """previousCloseDate"""
  previousCloseDate: String!
}

type IntroductionPortfolios {
  """Portfolios created successfully."""
  success: Boolean!
}

type PortfolioDelete {
  """Confirmatiopn delete portfolio."""
  success: Boolean!
}

type PortfolioSummaryItem {
  """Date"""
  date: String!

  """Market value."""
  marketValue: Float!

  """Deposited cash."""
  cash: Float!
}

type PortfolioSummary {
  """Portfolio summary data."""
  data: [PortfolioSummaryItem!]!
}

type Instrument {
  """Instrument uuid."""
  uuid: ID!

  """Code"""
  codeExchange: String!

  """Name"""
  name: String!

  """Type"""
  type: InstrumentType!

  """Instrument currency"""
  currency: Currency!
}

enum InstrumentType {
  stocks
  bonds
  governmentBonds
  etfs
  options
  commodities
  crypto
  immovables
  movables
  others
}

type Transaction {
  """Transaction uuid."""
  uuid: ID!

  """Date of purchase"""
  date: DateTime!

  """Operation type"""
  type: OperationType!

  """Quantity"""
  quantity: Float!

  """Price"""
  price: Float!

  """Instrument"""
  instrument: Instrument!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum OperationType {
  deposit
  withdrawal
  transfer
  buy
  sell
  dividend
  interest
  tax
  fee
  other
}

type Portfolio {
  """Portfolio uuid."""
  uuid: ID!

  """Portfolio name."""
  name: String!

  """Portfolio transactions."""
  transactions: [Transaction!]!
}

type User {
  """User uuid."""
  uuid: ID!

  """User date created."""
  createdAt: Date!

  """User email."""
  email: EmailAddress!

  """User name."""
  name: String!

  """User introduction step."""
  introductionStep: IntroductionStep!

  """User default currency."""
  defaultCurrency: Currency!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

enum IntroductionStep {
  DefaultCurrency
  CashAccounts
  Portfolios
  Completed
}

type TransactionCreate {
  """Success"""
  success: Boolean!
}

type Query {
  emailExist(data: EmailInput!): Email!
  cashAccounts: [CashAccount!]!
  cashAccount(uuid: ID!): CashAccount!
  searchInstrument(data: SearchInstrumentInput!): [SearchInstrument!]!
  instrumentHistory(data: InstrumentHistoryInput!): [InstrumentHistory!]!
  portfolios: [Portfolio!]!
  portfolio(uuid: String!): Portfolio!

  """Get portfolio summary data."""
  portfolioSummary(data: PortfolioSummaryInput!): PortfolioSummary!
  user: User!
}

input EmailInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input SearchInstrumentInput {
  """Instrument name."""
  name: String!

  """Instrument type."""
  type: InstrumentType!
}

input InstrumentHistoryInput {
  """Code"""
  code: String!

  """Exchange"""
  exchange: String!

  """Period"""
  period: String

  """From"""
  from: String!

  """To"""
  to: String
}

input PortfolioSummaryInput {
  """Account uuid."""
  uuid: ID!

  """From date."""
  from: DateTime!

  """To date."""
  to: DateTime!
}

type Mutation {
  signupLocal(data: SignupInput!): SignupLocal!
  confirmSignup(data: ConfirmSignupInput!): ConfirmSignup!
  sendCode(data: SendCodeInput!): SendCode!
  signinLocal(data: SigninInput!): SigninLocal!
  logout: Logout!
  resetPassword(data: ResetPasswordInput!): ResetPassword!
  setNewPassword(data: SetNewPasswordInput!): SetNewPassword!
  refreshToken: Refresh!
  cashAccountCreate(data: CashAccountCreateInput!): CashAccount!
  introductionCashAccountCreates(data: IntroductionCashAccountCreatesInput!): IntroductionCashAccounts!
  cashAccountUpdate(uuid: ID!, data: CashAccountUpdateInput!): CashAccount!
  cashAccountDelete(uuid: ID!): CashAccountDelete!
  cashAccountAddFunds(data: CashAccountAddFundsInput!): CashAccount!
  portfolioCreate(data: PortfolioCreateInput!): Portfolio!
  introductionPortfolioCreates(data: IntroductionPortfolioCreatesInput!): IntroductionPortfolios!
  portfolioUpdate(uuid: String!, data: PortfolioUpdateInput!): Portfolio!
  portfolioDelete(uuid: String!): PortfolioDelete!
  updateUser(data: UpdateUserInput!): User!
  transactionCreate(data: TransactionCreateInput!): TransactionCreate!
}

input SignupInput {
  """Email."""
  email: EmailAddress!

  """Name."""
  name: String!

  """Password."""
  password: String!

  """Token."""
  token: String!
}

input ConfirmSignupInput {
  """Email."""
  email: EmailAddress!

  """Code."""
  code: String!

  """Token."""
  token: String!
}

input SendCodeInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input SigninInput {
  """Email."""
  email: String!

  """Password."""
  password: String!

  """Token."""
  token: String!
}

input ResetPasswordInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input SetNewPasswordInput {
  """Password."""
  password: String!

  """Reset token."""
  resetToken: String!

  """Token."""
  token: String!
}

input CashAccountCreateInput {
  """Cash account name."""
  name: String!

  """Cash account currency."""
  currency: Currency!
}

input IntroductionCashAccountCreatesInput {
  """Cash accounts array."""
  cashAccounts: [CashAccountCreateInput!]!
}

input CashAccountUpdateInput {
  """Cash account name."""
  name: String!
}

input CashAccountAddFundsInput {
  """Account uuid."""
  uuid: ID!

  """Cash amount."""
  amount: Float!
}

input PortfolioCreateInput {
  """Portfolio name."""
  name: String!
}

input IntroductionPortfolioCreatesInput {
  """Portfolios array."""
  portfolios: [PortfolioCreateInput!]!
}

input PortfolioUpdateInput {
  """Portfolio name."""
  name: String
}

input UpdateUserInput {
  """New user email."""
  email: EmailAddress

  """New user name."""
  name: String

  """New user default currency."""
  defaultCurrency: Currency
}

input TransactionCreateInput {
  portfolioUuid: String!
  cashAccountUuid: String!
  instrument: InstrumentCreateInput!
  date: DateTime!
  quantity: Float!
  price: Float!
  comission: Float!
}

input InstrumentCreateInput {
  """Code"""
  code: String!

  """Exchange"""
  exchange: String!

  """Name"""
  name: String!

  """Type"""
  type: InstrumentType!

  """Instrument currency"""
  currency: Currency!
}