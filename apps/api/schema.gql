# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RegisterConfirm {
  success: Boolean!
}

type Email {
  exist: Boolean!
}

type Logout {
  success: Boolean!
}

type Refresh {
  success: Boolean!
}

type ResetPassword {
  success: Boolean!
}

type SendCode {
  success: Boolean!
}

type SetNewPassword {
  success: Boolean!
}

type LoginLocal {
  success: Boolean!
}

type RegisterLocal {
  success: Boolean!
}

type User {
  """User uuid."""
  uuid: ID!

  """User date created."""
  createdAt: Date!

  """User email."""
  email: EmailAddress!

  """User name."""
  name: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

type Query {
  emailExist(data: EmailInput!): Email!
  user: User!
}

input EmailInput {
  email: EmailAddress!

  """Token."""
  token: String!
}

type Mutation {
  registerLocal(data: RegisterInput!): RegisterLocal!
  registerConfirm(data: RegisterConfirmInput!): RegisterConfirm!
  sendCode(data: SendCodeInput!): SendCode!
  loginLocal(data: LoginInput!): LoginLocal!
  logout: Logout!
  resetPassword(data: ResetPasswordInput!): ResetPassword!
  setNewPassword(data: SetNewPasswordInput!): SetNewPassword!
  refreshToken: Refresh!
  updateUser(data: UpdateUserInput!): User!
}

input RegisterInput {
  email: EmailAddress!
  name: String!
  password: String!
  token: String!
}

input RegisterConfirmInput {
  email: EmailAddress!
  code: String!
  token: String!
}

input SendCodeInput {
  email: EmailAddress!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
  token: String!
}

input ResetPasswordInput {
  email: EmailAddress!
  token: String!
}

input SetNewPasswordInput {
  """Password."""
  password: String!

  """Reset token."""
  resetToken: String!

  """Token."""
  token: String!
}

input UpdateUserInput {
  """New user email."""
  email: EmailAddress

  """New user name."""
  name: String
}