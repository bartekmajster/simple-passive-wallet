generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  uuid                 String           @id @default(uuid())
  createdAt            DateTime         @default(now())
  email                String           @unique
  name                 String
  password             String
  confirmationCodeHash String?          @unique
  defaultCurrency      String
  introductionStep     IntroductionStep @default(DefaultCurrency)
  sessions             Session[]
  cashAccounts         CashAccount[]
  portfolios           Portfolio[]
  subscription         Subscription     @default(FREE)
}

model Session {
  name      String
  rtHash    String   @unique
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userUuid], references: [uuid])
  userUuid  String
}

model CashAccount {
  uuid       String                 @id @default(uuid())
  name       String
  balance    Float                  @default(0)
  currency   String
  user       User                   @relation(fields: [userUuid], references: [uuid])
  userUuid   String
  operations CashAccountOperation[] @relation()

  @@unique([userUuid, uuid])
}

model CashAccountOperation {
  uuid            String                   @id @default(uuid())
  cashAccount     CashAccount              @relation(fields: [cashAccountUuid], references: [uuid])
  cashAccountUuid String
  date            DateTime                 @default(now())
  type            CashAccountOperationType
  amount          Float
  portfolio       Portfolio?               @relation(fields: [portfolioUuid], references: [uuid])
  portfolioUuid   String?
}

model Portfolio {
  uuid                  String                 @id @default(uuid())
  name                  String
  user                  User                   @relation(fields: [userUuid], references: [uuid])
  userUuid              String
  transactions          Transaction[]
  cashAccountOperations CashAccountOperation[]

  @@unique([userUuid, uuid])
}

model Transaction {
  uuid           String        @id @default(uuid())
  date           DateTime
  type           OperationType
  quantity       Float
  price          Float
  commission     Float
  portfolio      Portfolio     @relation(fields: [portfolioUuid], references: [uuid])
  portfolioUuid  String
  instrument     Instrument    @relation(fields: [instrumentUuid], references: [uuid])
  instrumentUuid String
}

model Instrument {
  uuid         String         @id @default(uuid())
  symbol       String         @unique
  name         String
  type         InstrumentType
  currency     String
  transactions Transaction[]
}

enum Subscription {
  FREE
  LITE
  EXPERT
}

enum CashAccountOperationType {
  deposit
  withdrawal
  transfer
  interest
  tax
  fee
  other
}

enum InstrumentType {
  stocks
  bonds
  governmentBonds
  etfs
  options
  commodities
  crypto
  immovables
  movables
  others
}

enum IntroductionStep {
  DefaultCurrency
  CashAccounts
  Portfolios
  Completed
}

enum OperationType {
  deposit
  withdrawal
  transfer
  buy
  sell
  dividend
  interest
  tax
  fee
  other
}
