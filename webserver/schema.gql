# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ConfirmSignup {
  """Confirmatiopn signup successful."""
  success: Boolean!
}

type Email {
  """Email existence."""
  exist: Boolean!
}

type Logout {
  """Logout successful."""
  success: Boolean!
}

type Refresh {
  """Refresh successful."""
  success: Boolean!
}

type SendCode {
  """Send code successful."""
  success: Boolean!
}

type SigninLocal {
  """Signin local successful."""
  success: Boolean!
}

type SignupLocal {
  """Signup local successful."""
  success: Boolean!
}

type Portfolio {
  """Portfolio uuid."""
  uuid: ID!

  """Portfolio name."""
  name: String!

  """Is portfolio rebalancing enabled."""
  rebalancingEnabled: Boolean!
}

type IntroductionPortfolios {
  """Portfolios created successfully."""
  success: Boolean!
}

type User {
  """User uuid."""
  uuid: ID!

  """User date created."""
  createdAt: Date!

  """User email."""
  email: EmailAddress!

  """User name."""
  name: String!

  """User introduction step."""
  introductionStep: IntroductionStep!

  """User default currency."""
  defaultCurrency: Currency!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

enum IntroductionStep {
  DefaultCurrency
  CashAccounts
  Portfolios
  Completed
}

enum Currency {
  CHF
  EUR
  GBP
  USD
  PLN
}

type Query {
  emailExist(data: EmailInput!): Email!
  portfolios: [Portfolio!]!
  portfolio(uuid: String!): Portfolio!
  user: User!
}

input EmailInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

type Mutation {
  signupLocal(data: SignupInput!): SignupLocal!
  sendCode(data: SendCodeInput!): SendCode!
  confirmSignup(data: ConfirmSignupInput!): ConfirmSignup!
  signinLocal(data: SigninInput!): SigninLocal!
  logout: Logout!
  refreshToken: Refresh!
  createPortfolio(data: CreatePortfolioInput!): Portfolio!
  introductionCreateCashAccounts(data: IntroductionCreatePortfoliosInput!): IntroductionPortfolios!
  updatePortfolio(uuid: String!, data: UpdatePortfolioInput!): Portfolio!
  deletePortfolio(uuid: String!): Portfolio!
  updateUser(data: UpdateUserInput!): User!
}

input SignupInput {
  """Email."""
  email: EmailAddress!

  """Name."""
  name: String!

  """Password."""
  password: String!

  """Token."""
  token: String!
}

input SendCodeInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input ConfirmSignupInput {
  """Email."""
  email: EmailAddress!

  """Code."""
  code: String!

  """Token."""
  token: String!
}

input SigninInput {
  """Email."""
  email: String!

  """Password."""
  password: String!

  """Token."""
  token: String!
}

input CreatePortfolioInput {
  """Portfolio name."""
  name: String!

  """Is portfolio rebalancing enabled."""
  rebalancingEnabled: Boolean!
}

input IntroductionCreatePortfoliosInput {
  """Portfolios array."""
  portfolios: [CreatePortfolioInput!]!
}

input UpdatePortfolioInput {
  """Portfolio name."""
  name: String

  """Is portfolio rebalancing enabled."""
  rebalancingEnabled: Boolean
}

input UpdateUserInput {
  """New user email."""
  email: EmailAddress

  """New user name."""
  name: String

  """New user default currency."""
  defaultCurrency: Currency
}