# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ConfirmSignup {
  """Confirmatiopn signup successful."""
  success: Boolean!
}

type Email {
  """Email existence."""
  exist: Boolean!
}

type Logout {
  """Logout successful."""
  success: Boolean!
}

type Refresh {
  """Refresh successful."""
  success: Boolean!
}

type ResetPassword {
  """Send reset password successful."""
  success: Boolean!
}

type SendCode {
  """Send code successful."""
  success: Boolean!
}

type SetNewPassword {
  """Name of the user."""
  success: Boolean!
}

type SigninLocal {
  """Signin local successful."""
  success: Boolean!
}

type SignupLocal {
  """Signup local successful."""
  success: Boolean!
}

type CashAccountDelete {
  """Confirmatiopn delete cash account."""
  success: Boolean!
}

type CashAccountOperation {
  """Transaction uuid."""
  uuid: ID!

  """Date of the transaction."""
  date: String!

  """Cash account balance."""
  amount: Float!

  """Cash account oparation type."""
  type: CashAccountOperationType!
}

enum CashAccountOperationType {
  deposit
  withdrawal
  transfer
}

type CashAccount {
  """Cash account uuid."""
  uuid: ID!

  """Cash account name."""
  name: String!

  """Cash account currency."""
  currency: Currency!

  """Account balance."""
  balance: Float!

  """Account opeartions."""
  operations(first: Float, skip: Float): [CashAccountOperation!]!
}

enum Currency {
  CHF
  EUR
  GBP
  USD
  PLN
}

type IntroductionCashAccounts {
  """Cash accounts created successfully."""
  success: Boolean!
}

type InstrumentDetails {
  """language"""
  language: String!

  """region"""
  region: String!

  """currency"""
  currency: String!

  """exchangeTimezoneName"""
  exchangeTimezoneName: String!

  """longName"""
  longName: String!

  """symbol"""
  symbol: String!

  """quoteType"""
  quoteType: String!

  """regularMarketPrice"""
  regularMarketPrice: Float!

  """regularMarketDayRange"""
  regularMarketDayRange: String!

  """exchange"""
  exchange: String!

  """fiftyTwoWeekRange"""
  fiftyTwoWeekRange: String!

  """ytdReturn"""
  ytdReturn: Float!

  """quoteSourceName"""
  quoteSourceName: String!

  """regularMarketPreviousClose"""
  regularMarketPreviousClose: Float!
}

type InstrumentHistory {
  """Date"""
  date: String!

  """Open"""
  open: Float!

  """High"""
  high: Float!

  """Low"""
  low: Float!

  """Close"""
  close: Float!
}

type SearchInstruments {
  """quoteType"""
  quoteType: String!

  """symbol"""
  symbol: String!

  """longname"""
  longname: String!

  """exchange"""
  exchange: String!
}

type IntroductionPortfolios {
  """Portfolios created successfully."""
  success: Boolean!
}

type PortfolioDelete {
  """Confirmatiopn delete portfolio."""
  success: Boolean!
}

type Portfolio {
  """Portfolio uuid."""
  uuid: ID!

  """Portfolio name."""
  name: String!
}

type User {
  """User uuid."""
  uuid: ID!

  """User date created."""
  createdAt: Date!

  """User email."""
  email: EmailAddress!

  """User name."""
  name: String!

  """User introduction step."""
  introductionStep: IntroductionStep!

  """User default currency."""
  defaultCurrency: Currency!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

enum IntroductionStep {
  DefaultCurrency
  CashAccounts
  Portfolios
  Completed
}

type Query {
  emailExist(data: EmailInput!): Email!
  cashAccounts: [CashAccount!]!
  cashAccount(uuid: ID!): CashAccount!
  searchInstruments(data: SearchInstrumentsInput!): [SearchInstruments!]!
  instrumentDetails(data: InstrumentDetailsInput!): InstrumentDetails!
  instrumentHistory(data: InstrumentHistoryInput!): [InstrumentHistory!]!
  portfolios: [Portfolio!]!
  portfolio(uuid: String!): Portfolio!
  user: User!
}

input EmailInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input SearchInstrumentsInput {
  """Instrument name."""
  name: String!
}

input InstrumentDetailsInput {
  """Symbol"""
  symbol: String!
}

input InstrumentHistoryInput {
  """Symbol"""
  symbol: String!

  """Interval"""
  interval: String!

  """From"""
  from: String!
}

type Mutation {
  signupLocal(data: SignupInput!): SignupLocal!
  confirmSignup(data: ConfirmSignupInput!): ConfirmSignup!
  sendCode(data: SendCodeInput!): SendCode!
  signinLocal(data: SigninInput!): SigninLocal!
  logout: Logout!
  resetPassword(data: ResetPasswordInput!): ResetPassword!
  setNewPassword(data: SetNewPasswordInput!): SetNewPassword!
  refreshToken: Refresh!
  createCashAccount(data: CreateCashAccountInput!): CashAccount!
  introductionCreateCashAccounts(data: IntroductionCreateCashAccountsInput!): IntroductionCashAccounts!
  updateCashAccount(uuid: ID!, data: UpdateCashAccountInput!): CashAccount!
  deleteCashAccount(uuid: ID!): CashAccountDelete!
  addFundsToCashAccount(data: AddFundsToCashAccountInput!): CashAccount!
  createPortfolio(data: CreatePortfolioInput!): Portfolio!
  introductionCreatePortfolios(data: IntroductionCreatePortfoliosInput!): IntroductionPortfolios!
  updatePortfolio(uuid: String!, data: UpdatePortfolioInput!): Portfolio!
  deletePortfolio(uuid: String!): PortfolioDelete!
  updateUser(data: UpdateUserInput!): User!
}

input SignupInput {
  """Email."""
  email: EmailAddress!

  """Name."""
  name: String!

  """Password."""
  password: String!

  """Token."""
  token: String!
}

input ConfirmSignupInput {
  """Email."""
  email: EmailAddress!

  """Code."""
  code: String!

  """Token."""
  token: String!
}

input SendCodeInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input SigninInput {
  """Email."""
  email: String!

  """Password."""
  password: String!

  """Token."""
  token: String!
}

input ResetPasswordInput {
  """Email."""
  email: EmailAddress!

  """Token."""
  token: String!
}

input SetNewPasswordInput {
  """Password."""
  password: String!

  """Reset token."""
  resetToken: String!

  """Token."""
  token: String!
}

input CreateCashAccountInput {
  """Cash account name."""
  name: String!

  """Cash account currency."""
  currency: Currency!
}

input IntroductionCreateCashAccountsInput {
  """Cash accounts array."""
  cashAccounts: [CreateCashAccountInput!]!
}

input UpdateCashAccountInput {
  """Cash account name."""
  name: String!
}

input AddFundsToCashAccountInput {
  """Account uuid."""
  uuid: ID!

  """Cash amount."""
  amount: Float!
}

input CreatePortfolioInput {
  """Portfolio name."""
  name: String!
}

input IntroductionCreatePortfoliosInput {
  """Portfolios array."""
  portfolios: [CreatePortfolioInput!]!
}

input UpdatePortfolioInput {
  """Portfolio name."""
  name: String
}

input UpdateUserInput {
  """New user email."""
  email: EmailAddress

  """New user name."""
  name: String

  """New user default currency."""
  defaultCurrency: Currency
}